# key binds

# Window submap  (窗口相关的submap)
# ===================================================================
bind = $MAIN_MOD, W, exec, hyprctl dispatch submap WindowAction && notify-send "WindowAction submap"                    # <MAIN_MOD W ( )>
submap=WindowAction
# Opts
  bind = , Q, exec, hyprctl dispatch killactive       && hyprctl dispatch submap reset && notify-send "关闭活动窗口"    # <Q>
  bind = , R, exec, hyprctl dispatch exit             && hyprctl dispatch submap reset && notify-send "重启 hyprland"   # <R>
  bind = , T, exec, hyprctl dispatch togglefloating   && hyprctl dispatch submap reset && notify-send "浮动窗口切换"    # <T>
  bind = , P, exec, hyprctl dispatch pseudo           && hyprctl dispatch submap reset && notify-send "伪浮动窗口切换"  # <P>
  bind = , F, exec, hyprctl dispatch fullscreen 1     && hyprctl dispatch submap reset && notify-send "全屏窗口切换"    # <F>
  bind = , G, exec, hyprctl dispatch fakefullscreen   && hyprctl dispatch submap reset && notify-send "伪全屏窗口切换"  # <G>
  bind = , O, exec, hyprctl dispatch toggleopaque     && hyprctl dispatch submap reset && notify-send "透明切换"        # <O>
  bind = , L, exec, hyprctl dispatch exec [noanim] $LOCK_SCRIPT && hyprctl dispatch submap reset && notify-send "锁屏"  # <L>
  bind = , E, exec, $HYPR_SCRIPTS_DIR/randwall.sh $WALLPAPER_DIR && hyprctl dispatch submap reset
  bind = , X, exec, killall dunst && dunst && hyprctl dispatch submap reset && sleep 2 && notify-send "test" "test new config new" -u normal -t 5000
# 移动当前窗口到指定工作区
  bind = , 1, exec, hyprctl dispatch movetoworkspace 1 && hyprctl dispatch submap reset                                 # <1>
  bind = , 2, exec, hyprctl dispatch movetoworkspace 2 && hyprctl dispatch submap reset                                 # <2>
  bind = , 3, exec, hyprctl dispatch movetoworkspace 3 && hyprctl dispatch submap reset                                 # <3>
  bind = , 4, exec, hyprctl dispatch movetoworkspace 4 && hyprctl dispatch submap reset                                 # <4>
  bind = , 5, exec, hyprctl dispatch movetoworkspace 5 && hyprctl dispatch submap reset                                 # <5>
  bind = , 6, exec, hyprctl dispatch movetoworkspace 6 && hyprctl dispatch submap reset                                 # <6>
  bind = , 7, exec, hyprctl dispatch movetoworkspace 7 && hyprctl dispatch submap reset                                 # <7>
  bind = , 8, exec, hyprctl dispatch movetoworkspace 8 && hyprctl dispatch submap reset                                 # <8>
# 快速切换活动工作区
  bind = , J, workspace, e+1                                                                                            # <J>
  bind = , K, workspace, e-1                                                                                            # <K>
#  Quit
bind = , W,      exec, hyprctl dispatch submap reset && notify-send "Exit"                                              # <W>:   Quit
bind = , escape, exec, hyprctl dispatch submap reset && notify-send "Exit" # <ESC>
# 交换窗口window
  bind = , S, exec, hyprctl dispatch submap SwapWindow && notify-send "Swap Window"  # <MAIN_MOD M S ( )>
  submap=SwapWindow
# Opt
    bind = , H, movewindow,l               # <H>: Left
    bind = , L, movewindow,r               # <L>: Right
    bind = , K, movewindow,u               # <K>: Up
    bind = , J, movewindow,d               # <J>: Down
    bind = , P, swapnext,  prev            # <P>: Prev
    bind = , N, swapnext,                  # <N>: Next
# Quit
bind = , S,      exec, hyprctl dispatch submap reset && notify-send "Exit" # <S>: Quit
bind = , escape, exec, hyprctl dispatch submap reset && notify-send "Exit" # <ESC>
submap=reset

#submap=reset

# 移动窗口焦点
# ===================================================================
bind = $MAIN_MOD, 1, workspace,  1         # <MAIN_MOD 1>
bind = $MAIN_MOD, 2, workspace,  2         # <MAIN_MOD 2>
bind = $MAIN_MOD, 3, workspace,  3         # <MAIN_MOD 3>
bind = $MAIN_MOD, 4, workspace,  4         # <MAIN_MOD 4>
bind = $MAIN_MOD, 5, workspace,  5         # <MAIN_MOD 5>
bind = $MAIN_MOD, 6, workspace,  6         # <MAIN_MOD 6>
bind = $MAIN_MOD, 7, workspace,  7         # <MAIN_MOD 7>
bind = $MAIN_MOD, 8, workspace,  8         # <MAIN_MOD 8>

# ===================================================================
                                                # 亮度和声音更改
# (亮度和声音)
#binde = , code:232, execr, light -U 5
#binde = , code:233, execr, light -A 5
bindle=, XF86MonBrightnessUp,   exec, light -A 5 && ~/.config/eww/scripts/brightness osd &  # <XF86MonBrightnessUp>:  亮度键 加
bindle=, XF86MonBrightnessDown, exec, light -U 5 && ~/.config/eww/scripts/brightness osd &  # <XF86MonBrightnessDown: 亮度键 减

# ===================================================================
                                                # 使用 amixer 调节音量
#bindle = ,  code:122, execr, amixer set Master 1%-
#bindle = ,  code:123, execr, amixer set Master 1%+
bindl  = , XF86AudioMute,        exec, pactl set-sink-mute @DEFAULT_SINK@ toggle && ~/.config/eww/scripts/volume osd &  # <XF86AudioMute>: 静音切换
bindle = , XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ && ~/.config/eww/scripts/volume osd &  # <XF86AudioRaiseVolume>: 音量 加
bindle = , XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- && ~/.config/eww/scripts/volume osd &  # <XF86AudioLowerVolume>: 音量 减

# ===================================================================
bind = $MAIN_MOD, E, exec, hyprctl dispatch submap VolumeBright && notify-send "VolumeBright submap"  # <MAIN_MOD E ( )>: 音量和亮度调节
submap=VolumeBright
# Opt
  bindl  = , 1, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle && notify-send "MUTE Volume" && ~/.config/eww/scripts/volume osd &  # ## <1>: mute
  bindle = , 2, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ && notify-send "Volume +5%"  && ~/.config/eww/scripts/volume osd &  # ## <2>: Volume UP
  bindle = , 3, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- && notify-send "Volume -5%"  && ~/.config/eww/scripts/volume osd &  # ## <3>: Volume DOWN
  bindle = , 4, exec, light -A 3 && ~/.config/eww/scripts/brightness osd &                                                          # ## <4>: Bright UP
  bindle = , 5, exec, light -U 3 && ~/.config/eww/scripts/brightness osd &                                                          # ## <5>: Bright DOWN
# Quit
bind = , E,      exec, hyprctl dispatch submap reset && notify-send "Exit"  # <E>: Quit
bind = , escape, exec, hyprctl dispatch submap reset && notify-send "Exit"  # <ESC>
submap=reset

# ===================================================================
                                              # windows group (窗口组
bind = $MAIN_MOD,  G, exec,hyprctl dispatch submap WindowsGroup && notify-send "窗口组模式" # <MAIN_MOD G ( )>
submap=WindowsGroup
  bind = , F,   togglegroup        # <F>:    抓取/释放
  bind = , tab, changegroupactive  # <TAB>:  窗口切换
# 两次floating 直接合并入组
  bind = , T,   togglefloating,    #
  bind = , T,   togglefloating,    # <T>:    合并窗口入组
  bind = , O,   exec, hyprctl dispatch lockactivegroup lock   && notify-send "锁定 组 <LOCK>"       # <O>:  组锁定
  bind = , U,   exec, hyprctl dispatch lockactivegroup unlock && notify-send "锁定 组 <UNLOCK>"     # <U>:  组解锁
  bind = , I,   exec, hyprctl dispatch lockactivegroup toggle && notify-send "切换锁定 组 <toggle>" # <I>:  切换锁定 (感知组锁定)
# 将移动焦点添加到这个submap方便切换窗口 MOVE foucus
  bind = , H,   movefocus, l         # <H>: Right
  bind = , L,   movefocus, r         # <L>: Left
  bind = , K,   movefocus, u         # <K>: Up
  bind = , J,   movefocus, d         # <J>: Down
  bind = , P,   cyclenext, prev      # <J>: Prev
  bind = , N,   cyclenext,           # <N>: Next
bind = , G,     exec, hyprctl dispatch submap reset && notify-send "Exit"
bind = , escape,exec, hyprctl dispatch submap reset && notify-send "Exit"  # <ESC>
submap=reset

# ===================================================================
                                                      # 更改窗口焦点
bind = $MAIN_MOD, H,  movefocus, l
bind = $MAIN_MOD, L,  movefocus, r
bind = $MAIN_MOD, K,  movefocus, u
bind = $MAIN_MOD, J,  movefocus, d
bind = $MAIN_MOD, P,  cyclenext, prev                  # <P>: Prev
bind = $MAIN_MOD, N,  cyclenext,                       # <N>: Next

# ===================================================================

# mouseEmpty Mapping
bindm = $MAIN_MOD, mouse:272,  movewindow
bindm = $MAIN_MOD, mouse:273,  resizewindow

# Scratchpad
bind = $SUPER_ALT_MOD,  grave,  movetoworkspace,  special   # ## 将当前窗口发送到特殊工作区
bind = $MAIN_MOD,       grave,  togglespecialworkspace,     # ## 显示和隐藏特殊工作区
                                                            # ## 将特殊工作区的窗口发送到当前屏幕活动的工作区并平铺
bind = $SUPER_ALT_MOD,  w, movetoworkspace, m+1
bind = $SUPER_ALT_MOD,  w, togglefloating,  window
# ===================================================================


# Resize window (键盘模式调整当前窗口大小 , not work
# - will start a submap called "resize"
bind = $MAIN_MOD, R, exec, hyprctl dispatch submap resize && notify-send "调整窗口大小"
submap=resize                           # ## sets repeatable binds for resizing the active window
# Opts
  binde = , H, exec, hyprctl dispatch resizeactive -20  0
  binde = , J, exec, hyprctl dispatch resizeactive  0   20
  binde = , K, exec, hyprctl dispatch resizeactive  0  -20
  binde = , L, exec, hyprctl dispatch resizeactive  20  0
  binde = , Left,  exec, hyprctl dispatch resizeactive -10  0
  binde = , Down,  exec, hyprctl dispatch resizeactive  0   10
  binde = , Up,    exec, hyprctl dispatch resizeactive  0  -10
  binde = , Right, exec, hyprctl dispatch resizeactive  10  0
  # $(bc <<< "$(hyprctl monitors -j | jq '.[] | select(.focused == true) | .width ' -r) / 2") 0
# Quit
bind   = , R,       exec, hyprctl dispatch submap reset && notify-send "Exit"   # ##
bindt   = , escape, exec, hyprctl dispatch submap reset && notify-send "Exit"   # ## use reset to go back to the global submap
submap = reset                                                                  # ## will reset the submap, meaning end the current one and return to the global one
# ===================================================================

# Apps
# ___________________________________________________________________
bind = $MAIN_MOD,  T,      exec,   kitty --start-as=fullscreen --title fullscreen_kitty  # ##  全屏
bind = $MAIN_MOD,  RETURN, exec,   kitty --title float_kitty                             # ##  浮动
bind = $ALT_MOD ,  RETURN, exec,   kitty --single-instance --title tile_kitty            # ##  平铺
bind = $CTRL_MOD,  1,      exec,   kitty --title kitty_cava       --hold cava
bind = $CTRL_MOD,  2,      exec,   kitty --title kitty_clock      --hold tty-clock -C5
bind = $CTRL_MOD,  3,      exec,   kitty --title kitty_alsamixer  --hold alsamixer
bind = $CTRL_MOD,  4,      exec,   thunar
bind = $MAIN_MOD,  space,  exec,   $ROFI_LAUNCHER
bind = $MAIN_MOD,  V,      exec,   cliphist list | rofi -dmenu -theme "$HOME/.config/rofi/launchers/type-2/style-1" | cliphist decode | wl-copy # ## clipboard store show whith wofi/rofi (在 wofi/rofi 中查看剪切板

# Screenshot 截图
# ___________________________________________________________________
#bind =          ,  Print,  execr,   $SCREENSHOT_SCRIPT
bind = $MAIN_MOD   $CTRL_MOD, 1,   exec,                             notify-send "选区截图发送至剪切板" && grim -g "$(slurp)" - | wl-copy     # ## 选区截图发送至剪切板
bind = $MAIN_MOD   $CTRL_MOD, 2,   exec, [noanim]                    notify-send "选区截图" && grim -g "$(slurp)" - | swappy -f -         # ## 选区截图
bind = $MAIN_MOD   $CTRL_MOD, 3,   exec, [float;noanim;toggleopaque] notify-send "截取当前活动窗口发送至剪切板" && grim -g "$(hyprctl activewindow -j | jq '.at[0], $a, .at[1], $b, .size[0], $c, .size[1]' -j --arg a ',' --arg b ' ' --arg c 'x')" - | wl-copy # ## 截取当前显示器全屏并拷贝至剪切板
bind = $MAIN_MOD   $CTRL_MOD, 4,   exec, [float;noanim;toggleopaque] notify-send "截取当前显示器全屏并拷贝至剪切板" && grim -o "$(hyprctl monitors -j | jq '.[] | select(.focused == true) | .name' -r)" - | wl-copy                                        # ## 截取当前显示器全屏并拷贝至剪切板
bind = $MAIN_MOD   $CTRL_MOD, 5,   exec, [float;noanim;toggleopaque] notify-send "暂停截屏" && grim -o $(hyprctl monitors -j | jq '.[] | select(.focused == true) | .name' -r) - | imv -f - & grim -g "$(slurp)" - | swappy -f - && killall imv-wayland   # ## 暂停屏幕（伪）截屏
# hyprctl clients -j | jq -r '.[] | select(.title != "") | "\(.class), \(.title), \(.workspace), \(.at), \(.size)"' | rofi -dmenu # ## 使用rofi进行模糊搜索截屏



# ===================================================================
## Lid Switch
# trigger when the switch is toggled
#bindl=,switch:Lid Switch,exec, hyprctl dispatch dpms on
# ## 屏幕合上屏幕黑屏的同时进行省电但是不锁屏
bindl=,switch:off:Lid Switch, exec, $HYPR_SCRIPTS_DIR/mode.sh open $HYPR_SCRIPTS_DIR/randwall.sh $WALLPAPER_DIR $HOME/.config/eww && iio-hyprland DSI-1
bindl=,switch:on:Lid Switch,  exec, $HYPR_SCRIPTS_DIR/mode.sh close
# ===================================================================

bind = $MAIN_MOD, F1, exec,notify-send "Game-mode 启动！" && $HYPR_SCRIPTS_DIR/gamemode.sh   # ## 官方的游戏模式


## ORC pot :'curl 127.0.0.1:port'
#   POST "/" => 翻译指定文本(body为需要翻译的文本),
#   GET "/config" => 打开设置,
#   GET "/translate" => 翻译指定文本(同"/"),
#   GET "/selection_translate" => 划词翻译,
#   GET "/input_translate" => 输入翻译,
#   GET "/ocr_recognize" => 截图OCR,
#   GET "/ocr_translate" => 截图翻译,
#   GET "/ocr_recognize?screenshot=false" => 截图OCR(不使用软件内截图),
#   GET "/ocr_translate?screenshot=false" => 截图翻译(不使用软件内截图),
#   GET "/ocr_recognize?screenshot=true" => 截图OCR,
#   GET "/ocr_translate?screenshot=true" => 截图翻译,
# ---
  bind = $ALT_MOD, X, exec, notify-send "Pot OCR 翻译" && grim -g "$(slurp)" ~/.cache/com.pot-app.pot-desktop/pot_screenshot_cut.png && curl "127.0.0.1:60828/ocr_recognize?screenshot=false"
  bind = $ALT_MOD, C, exec, notify-send "Pot 截图翻译" && grim -g "$(slurp)" ~/.cache/com.pot-app.pot-desktop/pot_screenshot_cut.png && curl "127.0.0.1:60828/ocr_translate?screenshot=false"
  bind = $ALT_MOD, V, exec, notify-send "Pot 剪切板翻译" && curl "127.0.0.1:60828/$(wl-paste)"
  bind = $ALT_MOD, B, exec, notify-send "Pot 划词翻译" && curl "127.0.0.1:60828/selection_translate"
  bind = $ALT_MOD, Z, exec, notify-send "Pot 输入同步翻译" && curl "127.0.0.1:60828/input_translate"
